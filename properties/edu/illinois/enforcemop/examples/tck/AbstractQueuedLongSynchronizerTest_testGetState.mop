package edu.illinois.enforcemop.examples.tck;

import java.util.*;
import java.util.concurrent.*;
import edu.illinois.enforcemop.examples.tck.*;

enforce AbstractQueuedLongSynchronizerTest_testGetState(AbstractQueuedLongSynchronizer q) {
	
	event beforecheck before(AbstractQueuedLongSynchronizer q):
	      call (* AbstractQueuedLongSynchronizer+.isHeldExclusively(..)) && target(q)  && countCond(count == 3) {
	      }

	event aftercheck after(AbstractQueuedLongSynchronizer q) :
	      call (* AbstractQueuedLongSynchronizer+.isHeldExclusively(..)) && target(q)   && countCond(count == 3) {
	      }

	event beforerelease before(AbstractQueuedLongSynchronizer q):
	      call (* AbstractQueuedLongSynchronizer+.release(..)) && target(q)    && countCond(count == 2) {
	      }

	event afteracq after(AbstractQueuedLongSynchronizer q):
	      call (* AbstractQueuedLongSynchronizer+.acquire(..)) && target(q)   && countCond(count == 2) {
	      }

 
		
	ere : afteracq beforecheck aftercheck beforerelease

	@nonfail {
		System.out.println("validate.");
	}
	
	@deadlock {
		System.out.println("Deadlock happened! Please restart!");
	}
}

