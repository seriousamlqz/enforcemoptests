package edu.illinois.enforcemop.examples.tck;

import java.util.*;
import java.util.concurrent.*;
import edu.illinois.enforcemop.examples.tck.*;

enforce AbstractQueuedSynchronizerTest_testAcquireInterruptibly1() {
	
	String interruptibleThread = "";

	event beforerelease before():
	      call (* AbstractQueuedSynchronizer+.release(..)) {
	      }

	event beforeinterrupt before():
	      call (* Thread+.interrupt(..)) && threadBlocked(interruptibleThread){
	      }


	event beforeacq before():
	      call (* AbstractQueuedSynchronizer+.acquireInterruptibly(..)) {
	      	   interruptibleThread = Thread.currentThread().getName();
	      }

	event afterinterruptiblefinish after() :
	      	execution(* Runnable+.run(..)) && threadName(interruptibleThread){
      	      }


 
		
	ere : beforeacq beforeinterrupt afterinterruptiblefinish beforerelease

	@nonfail {
		System.out.println("validate.");
	}
	
	@deadlock {
		System.out.println("Deadlock happened! Please restart!");
	}
}

